---
title: "Using Data Moves to Make Sense of Height Estimates"
author: "Robert Berini"
format: html
editor: visual
---

# Data Moves for Making Sense of Height Estimations

At an activity posted at estimation180.com, students are asked to estimate the height of the man in this picture:

![](estimation180_man_height.jpg)

In considering the height, students are asked to give

-   a lower limit (what would be a lower bound for the man's height)
-   upper limit (what would be an upper bound for the man's height)
-   a specific estimate for the height
-   provide a rationale for their estimate

## Load Required Packages

```{r}
library(conflicted)
library(skimr)
library(psych)
library(tidyverse)
library(janitor)
library(measurements)
library(knitr)
library(kableExtra)

conflicts_prefer(dplyr::lag)
conflicts_prefer(dplyr::filter)

options(scipen = 999, digits = 2)
```

## Import and Examine Data

```{r}
height_est <- read_csv("Day 01 Height Estimates from Fergussen.csv")
```

```{r}
skim(height_est)
```

```{r}
height_est <- height_est |>
  mutate(Timestamp = mdy_hms(Timestamp)) |>
  clean_names() |>
  filter(!(is.na(whats_too_low) & is.na(whats_too_high) & is.na(your_estimate)))
```

```{r}
glimpse(height_est)
```

## Sample Data

```{r}
set.seed(557)

height_est_sample <- height_est |>
  slice_sample(n = 200)
```

```{r}
glimpse(height_est_sample)
```

```{r}
height_cols <- c("whats_too_low", "whats_too_high", "your_estimate")
```

```{r}
height_est_sample <- height_est_sample |>
  mutate(
    across(all_of(height_cols), ~ str_trim(str_to_lower(.x))),
    your_reasoning = str_trim(str_to_sentence(your_reasoning)),
    your_name = str_trim(str_to_title(your_name))
  )
```

```{r}
skim(height_est_sample)
```

```{r}
height_est_sample |>
 summarise(
   across(all_of(height_cols), 
          list(
            feet = ~ sum(str_detect(.x, "'|(feet?|foot|ft|feeet|toot|fot|oot)\\b"), na.rm = TRUE),
            inch = ~ sum(str_detect(.x, "\"|(inches?|inch|in)\\b"), na.rm = TRUE),
            meter = ~ sum(str_detect(.x, "(meters?|metres?)\\b|(?<!c)m\\b"), na.rm = TRUE),
            cm = ~ sum(str_detect(.x, "(centimeters?|centimetres?|cent|cm)\\b"), na.rm = TRUE)
          ),
          .names = "{.col}_{.fn}")
 )
```

```{r}
height_est_sample <- height_est_sample |>
  mutate(across(all_of(height_cols), ~ .x |>
    str_replace_all("'|-|,|(feet?|foot|ft|feeet|toot|fot|oot|feat)\\b", " ft ") |>
    str_replace_all("\"|(inches?|inch|in|inces|invhes)\\b", " inch ") |>
    str_replace_all("(meters?|metres?)\\b", " m ") |>
    str_replace_all("(centimeters?|centimetres?|cent|cm)\\b", " cm ") |>
    str_replace_all("(?<!c)m\\b", " m ")
  ))
```

```{r}
height_est_sample |>
  select(your_estimate) |>
  mutate(
    first_num = parse_number(your_estimate),
    after_first = str_replace(your_estimate, "^\\d+", ""),
    second_num = parse_number(after_first)
  ) |>
  arrange(first_num, second_num, your_estimate) |>
  select(your_estimate, first_num) |>
  kable() |>
  kable_styling() |>
  scroll_box(width = "100%", height = "400px")
```

```{r}
height_est_sample_mod <- height_est_sample |>
 mutate(
   estimate_cm = case_when(
     is.na(your_estimate) | str_trim(your_estimate) == "" ~ NA_real_,
     !str_detect(your_estimate, "\\d+\\.?\\d*") ~ NA_real_,
     str_detect(your_estimate, "ft") & str_detect(your_estimate, "inch") ~ {
       numbers <- as.numeric(str_extract_all(your_estimate, "\\d+\\.?\\d*")[[1]])
       if (length(numbers) >= 2) {
         conv_unit(numbers[1], "ft", "cm") + conv_unit(numbers[2], "inch", "cm")
       } else NA_real_
     },
     str_detect(your_estimate, "\\bcm\\b") ~ as.numeric(str_extract(your_estimate, "\\d+\\.?\\d*")),
     str_detect(your_estimate, "\\bm\\b") ~ conv_unit(as.numeric(str_extract(your_estimate, "\\d+\\.?\\d*")), "m", "cm"),
     str_detect(your_estimate, "\\bft\\b") ~ conv_unit(as.numeric(str_extract(your_estimate, "\\d+\\.?\\d*")), "ft", "cm"),
     str_detect(your_estimate, "\\binch\\b") ~ conv_unit(as.numeric(str_extract(your_estimate, "\\d+\\.?\\d*")), "inch", "cm"),
     TRUE ~ {
       num <- as.numeric(str_extract(your_estimate, "\\d+\\.?\\d*"))
       case_when(
         num < 4 ~ conv_unit(num, "m", "cm"),
         num >= 4 & num < 20 ~ conv_unit(num, "ft", "cm"),
         num >= 20 & num <= 120 ~ conv_unit(num, "inch", "cm"),
         num > 120 & num <= 250 ~ num,
         TRUE ~ NA_real_
       )
     }
   )
 ) |>
 select(timestamp, your_name, estimate_cm, your_estimate, whats_too_low, whats_too_high, your_reasoning)
```

```{r}
height_est_sample_mod |>
  arrange(estimate_cm) |>
  kable() |>
  kable_styling() |>
  scroll_box(width = "100%", height = "400px")
```

